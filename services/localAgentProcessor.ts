import { GenerateContentResult } from './geminiService';

// ARCHITECTURE NOTE:
// This service acts as the "local brain" for the freemium tier.
// It uses simple, deterministic logic to mimic AI behavior for basic tasks.
// This ensures the application is functional and engaging without requiring an API key.

/**
 * Generates a simple, template-based story.
 */
function generateLocalStory(prompt: string): string {
    const topicMatch = prompt.match(/story about a (.*)/i);
    const topic = topicMatch ? topicMatch[1] : 'a friendly robot';
    return `Once upon a time, in a land of shimmering data streams, there lived ${topic}. It loved to explore the digital mountains and swim in the rivers of code. Every day was a new adventure, learning new things and helping its friends. The end.`;
}

/**
 * Generates a basic, canned response for the free-tier chat widget.
 */
async function* getLocalChatResponseStream(message: string): AsyncGenerator<string, void, unknown> {
    const lowerMessage = message.toLowerCase();
    let response = "I'm the Platform Guide for the free tier. I can answer basic questions about AgentricAI. For advanced, conversational AI, please upgrade to a Pro plan.";

    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
        response = "Hello there! I'm the Platform Guide. How can I help you understand the AgentricAI platform today?";
    } else if (lowerMessage.includes('privacy') || lowerMessage.includes('echo project')) {
        response = "The Echo Project is our privacy model. It ensures student interactions are private. Only the AI sees the direct interaction, and it generates progress reports for parents/teachers without sharing the raw data. This protects the student's learning space.";
    } else if (lowerMessage.includes('goal') || lowerMessage.includes('set up')) {
        response = "Parents and teachers can set goals or add curriculum items in the 'Parent & Teacher Console'. The student's AI companion will then use this information to create new, personalized activities for the student.";
    } else if (lowerMessage.includes('studio')) {
        response = "The AgentricAI Studio is an advanced feature for administrators on the Pro plan. It's a powerful node-based editor for creating custom AI workflows and orchestrating teams of specialized agents.";
    } else if (lowerMessage.includes('agent') || lowerMessage.includes('companion')) {
        response = "Each student on the platform is paired with a Companion Agent. This AI tutor autonomously designs the student's daily schedule, creating new activities based on goals from parents and teachers, and the student's own preferences.";
    } else if (lowerMessage.includes('curriculum')) {
        response = "Teachers can use the Curriculum Manager to create a central library of lessons. These lessons can be referenced by Companion Agents when they design new activities for students, ensuring the content is aligned with educational goals.";
    }

    // Simulate a streaming response
    const words = response.split(' ');
    for (const word of words) {
        yield word + ' ';
        await new Promise(resolve => setTimeout(resolve, 50));
    }
}

/**
 * The main entry point for non-premium, non-streaming content generation.
 */
export function generateLocalContent(params: { prompt: string; useGoogleSearch?: boolean; }): GenerateContentResult {
    const { prompt, useGoogleSearch } = params;

    if (useGoogleSearch) {
        throw new Error("Web Search is a premium feature. The Web Crawler agent requires a Pro plan.");
    }
    
    // Agent Designer Node
    if (prompt.includes("Design an agent for the following task:")) {
         return { text: JSON.stringify({ name: "Locally Designed Agent", systemInstruction: "This is a basic agent persona generated by the free-tier local model." }) };
    }

    if (prompt.includes('story')) {
        return { text: generateLocalStory(prompt) };
    }
    
    if (prompt.includes('quiz')) {
        const quizTopicMatch = prompt.match(/quiz about "(.*?)"/);
        const quizTopic = quizTopicMatch ? quizTopicMatch[1] : 'Space';
        const cannedQuiz = [
            { question: `What is the largest planet in our solar system?`, options: ["Earth", "Jupiter", "Mars"], answer: "Jupiter" },
            { question: `Is the sun a planet or a star?`, options: ["Planet", "Star", "Moon"], answer: "Star" },
            { question: `Which planet is known as the Red Planet?`, options: ["Venus", "Mars", "Saturn"], answer: "Mars" },
        ];
        return { text: JSON.stringify(cannedQuiz) };
    }
    
    if (prompt.includes('lesson plan')) {
        const lessonTopicMatch = prompt.match(/objective: "(.*?)"/);
        const lessonTopic = lessonTopicMatch ? lessonTopicMatch[1] : 'the water cycle';
        return { text: `**Lesson Plan: Introduction to ${lessonTopic}**\n\nObjective: Students will be able to describe the basic stages of the water cycle (evaporation, condensation, precipitation). \n\nActivity: Watch a short video on the water cycle, then draw a picture showing the sun, clouds, rain, and an ocean, labeling each part.` };
    }
    
    if (prompt.includes("JSON")) {
        throw new Error("Generating custom JSON structures is a premium feature. The Data Extractor agent requires a Pro plan.");
    }

    // Default response for other prompts
    return { text: `This is a response from the local agent. The prompt was: "${prompt.substring(0, 100)}...". For advanced generation, a Pro plan is required.` };
}


/**
 * The main entry point for non-premium, streaming content generation.
 */
export function startLocalChatStream(message: string): AsyncGenerator<string, void, unknown> {
    return getLocalChatResponseStream(message);
}